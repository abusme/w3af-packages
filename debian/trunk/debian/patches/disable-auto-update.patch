--- a/core/controllers/auto_update/auto_update.py
+++ b/core/controllers/auto_update/auto_update.py
@@ -799,11 +799,11 @@
     FREQ_WEEKLY = 'W' # [W]eekly
     FREQ_MONTHLY = 'M' # [M]onthly
     # DEFAULT VALUES
-    DEFAULTS = {'auto-update': 'true', 'frequency': 'D',
+    DEFAULTS = {'auto-update': 'false', 'frequency': 'D',
                 'last-update': 'None', 'last-rev': 0}
 
     def __init__(self):
-        
+
         self._start_cfg_file = os.path.join(get_home_dir(), 'startup.conf')
         self._start_section = 'STARTUP_CONFIG'
         self._config = ConfigParser.ConfigParser()
--- a/w3af_console
+++ b/w3af_console
@@ -45,17 +45,6 @@
     -s <script_file> or --script=<script_file>
         Run <script_file> script.
 
-    -n or --no-update
-        No update check will be made when starting. This option takes 
-        precedence over the 'auto-update' setting in 'startup.conf' file.
-     
-    -f or --force-update
-        An update check will be made when starting. This option takes 
-        precedence over the 'auto-update' setting in 'startup.conf' file.
-     
-    -r <rev number> or --revision <rev number>
-    	Force to update to <rev number>.
-    
     -p <profile> or --profile=<profile>
         Run with the selected <profile>
 
@@ -67,8 +56,8 @@
 
 def main():
     try:
-        long_options = ['script=', 'help', 'test-all', 'no-update',
-                        'force-update', 'profile=', 'revision=']
+        long_options = ['script=', 'help', 'test-all',
+                        'profile=']
         opts, args = getopt.getopt(sys.argv[1:], "ehts:nfp:r:", long_options)
     except getopt.GetoptError, e:
         # print help information and exit:
@@ -76,7 +65,7 @@
         return -3
     scriptFile = None
     profile = None
-    doupdate = None
+    doupdate = False
     rev = 0 # HEAD revision
     
     for o, a in opts:
@@ -97,21 +86,6 @@
         if o in ('-h', '--help'):
             usage()
             return 0
-        if o in ('-f', '--force-update'):
-            doupdate = True
-        elif o in ('-n', '--no-update'):
-            doupdate = False
-        if o in ('-r', '--revision'):
-        	doupdate = True
-        	a = a.upper()
-        	if a in ('HEAD', 'PREV'):
-        		rev = 0 if (a == 'HEAD') else -1
-        	else:
-	        	try:
-	        		rev = int(a)
-	        	except ValueError:
-	        		om.out.error("Invalid value for revision number. Expected int.")
-	        		return -3
     
     # console
     from core.ui.consoleUi.consoleUi import consoleUi
--- a/w3af_gui
+++ b/w3af_gui
@@ -38,14 +38,6 @@
     -h or --help
         Display this help message.
 
-    -n or --no-update
-        No update check will be made when starting. This option takes 
-        precedence over the 'auto-update' setting in 'startup.conf' file.
-     
-    -f or --force-update
-        An update check will be made when starting. This option takes 
-        precedence over the 'auto-update' setting in 'startup.conf' file.
-    
     -p <profile> or --profile=<profile>
         Run with the selected <profile>
 
@@ -57,14 +49,14 @@
 
 def main():
     try:
-        long_options = ['help', 'no-update', 'force-update', 'profile=']
+        long_options = ['help', 'profile=']
         opts, args = getopt.getopt(sys.argv[1:], "ehnfp:", long_options)
     except getopt.GetoptError:
         # print help information and exit:
         usage()
         return -3
     profile = None
-    doupdate = None
+    doupdate = False
     for o, a in opts:
         if o in ( "-e"  ):
             # easter egg
@@ -78,11 +70,6 @@
         if o == "-h":
             usage()
             return 0
-        if o in ('-f', '--force-update'):
-            doupdate = True
-        elif o in ('-n', '--no-update'):
-            doupdate = False
-    
 
     # go with GTK, but first check about DISPLAY environment variable
     if sys.platform != "win32":
