--- a/core/data/bloomfilter/bloomfilter.py
+++ b/core/data/bloomfilter/bloomfilter.py
@@ -21,26 +21,7 @@
 
 '''
 
-# Generic imports,
-import os
-import string
-from random import choice
-from core.controllers.misc.temp_dir import get_temp_dir
-
-#
-#    This import should never fail
-#
-from core.data.bloomfilter.pybloom import BloomFilter as pure_python_filter
-
-#
-#    This might fail...
-#
-try:
-    from pybloomfilter import BloomFilter as mmap_filter
-except:
-    USE_PURE_PYTHON_FILTER = True
-else:
-    USE_PURE_PYTHON_FILTER = False
+from core.data.db.disk_set import disk_set
 
 
 class generic_bloomfilter(object):
@@ -64,163 +45,28 @@
     def add(self, key):
         raise NotImplementedError()
 
-class mmap_filter_wrapper(generic_bloomfilter):
+class disk_set_filter_wrapper(generic_bloomfilter):
     def __init__(self, capacity, error_rate=0.01):
-        generic_bloomfilter.__init__(self, capacity, error_rate)
+        generic_bloomfilter.__init__(self, 10**1024, 0.0)
         
-        #
-        #    Create the temp file
-        #
-        tempdir = get_temp_dir()
-        if not os.path.exists( tempdir ):
-            os.makedirs( tempdir )
-        filename = ''.join([choice(string.letters) for i in range(12)]) + '.w3af.bloom'
-        temp_file = os.path.join(tempdir, filename)
-        
-        self.bf = mmap_filter(capacity, error_rate, temp_file)
+        self.ds = disk_set()
 
     def __contains__(self, key):
-        return key in self.bf
+        return key in self.ds
         
     def __len__(self):
-        return len(self.bf)
+        return len(self.ds)
         
     def add(self, key):
-        return self.bf.add( key )
-        
-class pure_python_filter_wrapper(generic_bloomfilter):
-    def __init__(self, capacity, error_rate=0.01):
-        generic_bloomfilter.__init__(self, capacity, error_rate)
-        self.bf = pure_python_filter(capacity, error_rate)
-
-    def __contains__(self, key):
-        return key in self.bf
+        return self.ds.add( key )
         
-    def __len__(self):
-        return len(self.bf)
-        
-    def add(self, key):
-        return self.bf.add( key )
-
-if USE_PURE_PYTHON_FILTER:
-    #
-    #    Easier to install (embedded in extlib) but slow and memory hungry. 
-    #
-    bloomfilter = pure_python_filter_wrapper
-else:
-    #
-    #    Faster!
-    #
-    bloomfilter = mmap_filter_wrapper
-    
+bloomfilter = disk_set_filter_wrapper
+scalable_bloomfilter = disk_set_filter_wrapper
 
-class scalable_bloomfilter(object):
+class scalable_bloomfilter(disk_set_filter_wrapper):
     SMALL_SET_GROWTH = 2 # slower, but takes up less memory
     LARGE_SET_GROWTH = 4 # faster, but takes up more memory faster
 
     def __init__(self, initial_capacity=1000, error_rate=0.001,
                  mode=SMALL_SET_GROWTH):
-        """Implements a space-efficient probabilistic data structure that
-        grows as more items are added while maintaining a steady false
-        positive rate
-
-        initial_capacity
-            the initial capacity of the filter
-        error_rate
-            the error_rate of the filter returning false positives. This
-            determines the filters capacity. Going over capacity greatly
-            increases the chance of false positives.
-        mode
-            can be either scalable_bloomfilter.SMALL_SET_GROWTH or
-            scalable_bloomfilter.LARGE_SET_GROWTH. SMALL_SET_GROWTH is slower
-            but uses less memory. LARGE_SET_GROWTH is faster but consumes
-            memory faster.
-
-        >>> b = scalable_bloomfilter(initial_capacity=512, error_rate=0.001, \
-                                    mode=scalable_bloomfilter.SMALL_SET_GROWTH)
-        >>> b.add("test")
-        False
-        >>> "test" in b
-        True
-        >>> unicode_string = u'ยก'
-        >>> b.add(unicode_string)
-        False
-        >>> unicode_string in b
-        True
-        
-        >>> sbf = scalable_bloomfilter(mode=scalable_bloomfilter.SMALL_SET_GROWTH)
-        >>> count = 10000
-        >>> for i in xrange(0, count):
-        ...     _ = sbf.add(i)
-        ...
-        >>> sbf.capacity > count
-        True
-        >>> len(sbf) <= count
-        True
-        >>> abs((len(sbf) / float(count)) - 1.0) <= sbf.error_rate
-        True
-        """
-        if not error_rate or error_rate < 0:
-            raise ValueError("Error_Rate must be a decimal less than 0.")
-        self._setup(mode, 0.9, initial_capacity, error_rate)
-        self.filters = []
-
-    def _setup(self, mode, ratio, initial_capacity, error_rate):
-        self.scale = mode
-        self.ratio = ratio
-        self.initial_capacity = initial_capacity
-        self.error_rate = error_rate
-
-    def __contains__(self, key):
-        """Tests a key's membership in this bloom filter.
-
-        >>> b = scalable_bloomfilter(initial_capacity=100, error_rate=0.001, \
-                                    mode=scalable_bloomfilter.SMALL_SET_GROWTH)
-        >>> b.add("hello")
-        False
-        >>> "hello" in b
-        True
-
-        """
-        for f in reversed(self.filters):
-            if key in f:
-                return True
-        return False
-
-    def add(self, key):
-        """Adds a key to this bloom filter.
-        If the key already exists in this filter it will return True.
-        Otherwise False.
-
-        >>> b = scalable_bloomfilter(initial_capacity=100, error_rate=0.001, \
-                                    mode=scalable_bloomfilter.SMALL_SET_GROWTH)
-        >>> b.add("hello")
-        False
-        >>> b.add("hello")
-        True
-
-        """
-        if key in self:
-            return True
-        filter = self.filters[-1] if self.filters else None
-        if filter is None or len(filter) >= filter.capacity:
-            num_filters = len(self.filters)
-            filter = bloomfilter(
-                capacity=self.initial_capacity * (self.scale ** num_filters),
-                error_rate=self.error_rate * (self.ratio ** num_filters))
-            self.filters.append(filter)
-        filter.add(key)
-        return False
-
-    @property
-    def capacity(self):
-        """Returns the total capacity for all filters in this SBF"""
-        return sum([f.capacity for f in self.filters])
-
-    @property
-    def count(self):
-        return len(self)
-
-    def __len__(self):
-        """Returns the total number of elements stored in this SBF"""
-        return sum([len(f) for f in self.filters])
+        disk_set_filter_wrapper.__init__(self, 10**1024, 0.0)
\ No newline at end of file
--- a/core/data/bloomfilter/test_pybloom.py
+++ b/core/data/bloomfilter/test_pybloom.py
@@ -4,6 +4,7 @@
 
 from pybloom import BloomFilter
 from core.data.bloomfilter.bloomfilter import scalable_bloomfilter
+from core.controllers.misc.temp_dir import create_temp_dir
 
 
 class TestBloomFilter(unittest.TestCase):
@@ -37,7 +38,10 @@
         self.assertEqual(rnd in f, True)
 
 class TestScalableBloomfilter(unittest.TestCase):
-
+    
+    def setUp(self):
+        create_temp_dir()
+        
     def test_bloom_int(self):
 
         f = scalable_bloomfilter(mode=scalable_bloomfilter.SMALL_SET_GROWTH)
